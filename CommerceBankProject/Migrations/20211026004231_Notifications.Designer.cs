// <auto-generated />
using System;
using CommerceBankProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommerceBankProject.Migrations
{
    [DbContext(typeof(CommerceBankDbContext))]
<<<<<<< HEAD:CommerceBankProject/Migrations/20211113024335_notifications.Designer.cs
    [Migration("20211113024335_notifications")]
    partial class notifications
=======
    [Migration("20211026004231_Notifications")]
    partial class Notifications
>>>>>>> main:CommerceBankProject/Migrations/20211026004231_Notifications.Designer.cs
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CommerceBankProject.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("customerID")
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("darkMode")
                        .HasColumnType("bit");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CommerceBankProject.Models.AccountRecord", b =>
                {
                    b.Property<string>("actID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("actType")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("CommerceBankProject.Models.CustomerRecord", b =>
                {
                    b.Property<string>("customerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("claimed")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CommerceBankProject.Models.DateRecord", b =>
                {
                    b.Property<DateTime>("onDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("CommerceBankProject.Models.MonthlyResult", b =>
                {
                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("tmonth")
                        .HasColumnType("int");

                    b.Property<int>("tyear")
                        .HasColumnType("int");

                    b.ToTable("MonthlyResult");
                });

            modelBuilder.Entity("CommerceBankProject.Models.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("customerID")
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("onDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("read")
                        .HasColumnType("bit");

                    b.Property<bool>("saved")
                        .HasColumnType("bit");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CommerceBankProject.Models.NotificationSettings", b =>
                {
                    b.Property<string>("customerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("balanceRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("balanceRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("choresRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("choresRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("clothingRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("clothingRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("eatingOutRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("eatingOutRuleActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("endTimeRule")
                        .HasColumnType("time(7)");

                    b.Property<decimal>("essentialsRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("essentialsRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("foodRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("foodRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("funRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("funRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("gasRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("gasRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("monthlyBudgetRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("monthlyBudgetRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("otherRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("otherRuleActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("phoneRule")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("phoneRuleActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("startTimeRule")
                        .HasColumnType("time(7)");

                    b.Property<bool>("timeRuleActive")
                        .HasColumnType("bit");

                    b.HasKey("customerID");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("CommerceBankProject.Models.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("actID")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("actType")
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("customerID")
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("onDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("transType")
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("userEntered")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CommerceBankProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CommerceBankProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommerceBankProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CommerceBankProject.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
